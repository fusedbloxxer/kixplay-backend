// <auto-generated />
using System;
using KixPlay_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KixPlay_Backend.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220123174351_AddSecurityStampSeed")]
    partial class AddSecurityStampSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("OriginalPosterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPosterId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4b6ab4b-fdce-4790-96f2-074ac0061c69"),
                            Content = "Root 1 Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c")
                        },
                        new
                        {
                            Id = new Guid("b2737562-1423-4a90-812f-9730bef8a656"),
                            Content = "Child 1 Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8"),
                            ParentId = new Guid("d4b6ab4b-fdce-4790-96f2-074ac0061c69"),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c")
                        },
                        new
                        {
                            Id = new Guid("af5ebe4e-0c36-4e3c-8375-39efe513c760"),
                            Content = "Child 1 Sibling Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985"),
                            ParentId = new Guid("d4b6ab4b-fdce-4790-96f2-074ac0061c69"),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c")
                        },
                        new
                        {
                            Id = new Guid("b42f6170-aedb-4046-8627-4c418d072124"),
                            Content = "Child 2 Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            ParentId = new Guid("b2737562-1423-4a90-812f-9730bef8a656"),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c")
                        },
                        new
                        {
                            Id = new Guid("1b2748c6-0b46-4437-b785-93351eba229a"),
                            Content = "Root 2 Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            ReviewId = new Guid("a2862e81-a1ff-4084-90dd-ce8827ce27e2")
                        },
                        new
                        {
                            Id = new Guid("f798ed71-46c2-47f0-9dda-fc97efdb0c49"),
                            Content = "Child 1' Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            ParentId = new Guid("1b2748c6-0b46-4437-b785-93351eba229a"),
                            ReviewId = new Guid("a2862e81-a1ff-4084-90dd-ce8827ce27e2")
                        },
                        new
                        {
                            Id = new Guid("a023367a-8d82-4b5e-ac4d-8f305f14d647"),
                            Content = "Child 2' Comment",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OriginalPosterId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            ParentId = new Guid("f798ed71-46c2-47f0-9dda-fc97efdb0c49"),
                            ReviewId = new Guid("a2862e81-a1ff-4084-90dd-ce8827ce27e2")
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0faa2716-763a-46bd-aeb5-b731070edf23"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "horror"
                        },
                        new
                        {
                            Id = new Guid("63f38ef9-382c-4cca-b0fc-000a3aaa2e1e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "action"
                        },
                        new
                        {
                            Id = new Guid("bb85ef16-0dfc-4cf8-a248-929920f775e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "thriller"
                        },
                        new
                        {
                            Id = new Guid("5d90f656-95b7-41e9-afbc-7f03564a2b16"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "slowburn"
                        },
                        new
                        {
                            Id = new Guid("3cf709a3-a95c-4d56-a8d6-2ee490ca7161"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "drama"
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AiringStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("NextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviewImageUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewVideoUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PreviousId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NextId")
                        .IsUnique()
                        .HasFilter("[NextId] IS NOT NULL");

                    b.HasIndex("PreviousId")
                        .IsUnique()
                        .HasFilter("[PreviousId] IS NOT NULL");

                    b.ToTable("Medias", (string)null);
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.MediaInGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("GenreId", "MediaId")
                        .IsUnique();

                    b.ToTable("MediaInGenres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcda9b37-4d4e-42f6-93ff-297b7bd6d69e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("0faa2716-763a-46bd-aeb5-b731070edf23"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38")
                        },
                        new
                        {
                            Id = new Guid("62591aee-1b47-499f-93b0-78977272adea"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("bb85ef16-0dfc-4cf8-a248-929920f775e3"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38")
                        },
                        new
                        {
                            Id = new Guid("29c2ab05-d741-4030-8578-2ee548251784"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("5d90f656-95b7-41e9-afbc-7f03564a2b16"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38")
                        },
                        new
                        {
                            Id = new Guid("8caf43d0-0eed-4e7a-8b1a-02c7a7df0890"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("63f38ef9-382c-4cca-b0fc-000a3aaa2e1e"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("732e75d1-baa5-43bd-8636-8f91262545b2")
                        },
                        new
                        {
                            Id = new Guid("bb56200e-f47e-4bed-97ab-dfc9fb7f90d8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("0faa2716-763a-46bd-aeb5-b731070edf23"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095")
                        },
                        new
                        {
                            Id = new Guid("414873c1-82d0-4cb0-bd13-e4a76e3feed5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("bb85ef16-0dfc-4cf8-a248-929920f775e3"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095")
                        },
                        new
                        {
                            Id = new Guid("f6ffc53e-1ea7-4e29-b2fc-665f68fef9ff"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("5d90f656-95b7-41e9-afbc-7f03564a2b16"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095")
                        },
                        new
                        {
                            Id = new Guid("ccae8e17-8759-405f-8d48-a59324956f92"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = new Guid("3cf709a3-a95c-4d56-a8d6-2ee490ca7161"),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095")
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.MediaSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProviderId");

                    b.ToTable("MediaSources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f5ba7de-9a8f-434b-a61e-764dfe656bfb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            ProviderId = new Guid("4a022ad0-e6e6-4df3-9b95-bf1aa05db9df"),
                            Url = "https://filmeserialegratis.org/fractured/"
                        },
                        new
                        {
                            Id = new Guid("f0c5a927-2ac3-4fd9-b31b-88b4d377325d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            ProviderId = new Guid("4a022ad0-e6e6-4df3-9b95-bf1aa05db9df"),
                            Url = "https://filmeserialegratis.org/the-invitation-invitatia/"
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Reliable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a022ad0-e6e6-4df3-9b95-bf1aa05db9df"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "FSGratis este un site complet gratuit care contine link-uri catre site-uri de video sharing, mai exact site-uri ce gazduiesc fisiere video, filme, seriale si asa mai departe.",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reliable = "Trustworthy",
                            ThumbnailUrl = "https://filmeserialegratis.org/wp-content/uploads/2019/09/logofsgratis-2.png",
                            Title = "FSGratis",
                            Url = "https://filmeserialegratis.org/"
                        },
                        new
                        {
                            Id = new Guid("a573321a-5c27-4ba9-9903-ee00ca56b4c0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Animepahe is a popular website for anime lovers. You can watch thousands of free anime from Drama, History, Action, Romance and more. Animepahe is confident ...",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reliable = "Sussy",
                            ThumbnailUrl = "http://wasabi-files.lbstatic.nu/files/users/large/9666248_logo-animepahe.jpg?1629794131",
                            Title = "AnimePahe",
                            Url = "https://animepahe.com/"
                        },
                        new
                        {
                            Id = new Guid("eee0f7d1-9080-452e-97e6-7773190a59a8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Watch Anime for free in HD quality with English subbed or dubbed.",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reliable = "Trustworthy",
                            ThumbnailUrl = "https://i.imgur.com/RO2x9O5.png",
                            Title = "AnimixPlay",
                            Url = "https://animixplay.to/"
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.RelatedMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("MediaFromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MediaToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MediaToId");

                    b.HasIndex("MediaFromId", "MediaToId")
                        .IsUnique()
                        .HasFilter("[MediaFromId] IS NOT NULL AND [MediaToId] IS NOT NULL");

                    b.ToTable("RelatedMedias");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("HasSpoilers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OriginalPosterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<bool>("Recommended")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPosterId");

                    b.HasIndex("MediaId", "OriginalPosterId")
                        .IsUnique();

                    b.ToTable("Reviews", (string)null);

                    b.HasCheckConstraint("CK_VALID_RATING", "[Rating] BETWEEN 0 and 10");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c"),
                            Content = "Fractured is a mystery thriller, I'd agree with that, but the one tag that's missing, is surreal. It's a very odd film, so odd it's almost bonkers,\r\n                                    it's like being in a nightmare, you can't wake up, all events are out of your control, and every aspect of life is spiraling out of control. \r\n                                    I won't give a single spoiler away, because it would give the game away, all I could say is expect the unexpected. \r\n                                    I predicted events and outcomes, I got every single sequence of events wrong, loaded with twists and crammed full of intrigue. Sam Worthington is terrific.\r\n                                    It's trippy, it's slow to start, but great as it gets going, think The Lady vanishes. 7/10",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpoilers = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            OriginalPosterId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            Rating = 7f,
                            Recommended = true,
                            Title = "Expect the unexpected"
                        },
                        new
                        {
                            Id = new Guid("ab6f6d95-695d-41a2-9fc5-648bc83b16cb"),
                            Content = "When a movie decides to go places, as a viewer you have the choice to ride with it or abandon it.\r\n                                    I do hope you are taking option A and ride with it. It really is quite engaging and you will be quite\r\n                                    'mindblown' as another reviewer already rightfully stated. If you were wondering where Sam Worthington was (is) - wonder no more.\r\n                                    This is really a nice acting piece he got to grab and make something of it.\r\n                                    There are 2 obvious paths or choices or options, on how to view this or what it probably is telling us. So no Bonus points for guessing right.\r\n                                    This is about the journey and it is quite an exhausting one! But very good too",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpoilers = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            OriginalPosterId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8"),
                            Rating = 8f,
                            Recommended = true,
                            Title = "A mind of its own"
                        },
                        new
                        {
                            Id = new Guid("b2ed2f69-e6c7-482d-b146-ec7d14cde0fb"),
                            Content = "For a surprise worhington isnt stoic in this film but film potential could be used in better way and ending isnt very good",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpoilers = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            OriginalPosterId = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985"),
                            Rating = 4f,
                            Recommended = false,
                            Title = "Fracture"
                        },
                        new
                        {
                            Id = new Guid("a2862e81-a1ff-4084-90dd-ce8827ce27e2"),
                            Content = "I have to admit I am disappointed by this movie. I saw it had a high rating and I read some reviews about how good it was supposed to be. But in fact it's not that great. \r\n                                    It could have been so much better if they would not have dragged that whole story. By that I mean the only last half hour could be qualified as good. The rest of the movie is a battle to not fall asleep, with unstoppable irritating \r\n                                    conversations between a bunch of weirdo's. If it was not for the end, that you see coming from miles away by the way, then I would have scored the movie even lesser. The actors are not bad, they are just average. Anyways, \r\n                                    if other people like The Invitation, good for them, but it was not my cup of tea.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpoilers = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            OriginalPosterId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            Rating = 5f,
                            Recommended = false,
                            Title = "Only the end is okay, the rest is below average"
                        },
                        new
                        {
                            Id = new Guid("2fe24bcb-afa2-42df-bf28-5ea04172e783"),
                            Content = "Will (Logan Marshall-Green) and Kira (Emayatzy Corinealdi) have accepted a fancy dinner invitation (the invitation was fancy not the dinner) to the \r\n                                    house that he formally lived in. His ex-wife Eden (Tammy Blanchard) and her new husband David (Michiel Huisman) are hosting. Many couples show up, \r\n                                    all friends of Eden. Eden and Dave have spent the last two years in Mexico. \r\n                                    About 30 minutes into the film two more plot details fill in. Will and Eden had a son that died. Eden was in Mexico being part of a cult that helped her get over \r\n                                    her grief knowing she will be with her loves ones in the afterlife. Will suffers from the loss of his child and has bad memories.\r\n                                    Will suspects something is going on, but everyone else doesn't see it. As the audience we find the explanations acceptable, and Will maybe has issues...or not. We don't know \r\n                                    but soon the pieces come together when in end...when we finally decide we were actually entertained, but didn't know it as the film moves slow.\r\n                                    Michelle Krusiec is the token hot Asian chick.\r\n                                    Guide: F - word.No sex or nudity.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasSpoilers = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            OriginalPosterId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            Rating = 8f,
                            Recommended = true,
                            Title = "It's weird, but it's L.A."
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.ReviewOpinion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsFunny")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHelpful")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInteresting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId", "ReviewId")
                        .IsUnique();

                    b.ToTable("ReviewOpinions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7f78433-5e75-4abc-8b4c-412a9826abed"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = true,
                            IsHelpful = false,
                            IsInteresting = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c"),
                            UserId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8")
                        },
                        new
                        {
                            Id = new Guid("4f858175-50d2-4abe-9a58-d93cfe8c91bf"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = true,
                            IsHelpful = true,
                            IsInteresting = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c"),
                            UserId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976")
                        },
                        new
                        {
                            Id = new Guid("d9e431e4-3591-4cf2-9578-3e93115819fb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = false,
                            IsInteresting = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("80d6a3a4-2209-41c5-a826-c2cd87dca72c"),
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36")
                        },
                        new
                        {
                            Id = new Guid("cc5a4675-dfc1-4f65-8b3c-b641a61b7316"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = true,
                            IsInteresting = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("ab6f6d95-695d-41a2-9fc5-648bc83b16cb"),
                            UserId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976")
                        },
                        new
                        {
                            Id = new Guid("fcfcbe5b-b8fd-4872-b1bf-6c5f51154ff8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = false,
                            IsInteresting = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("ab6f6d95-695d-41a2-9fc5-648bc83b16cb"),
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602")
                        },
                        new
                        {
                            Id = new Guid("3e329c08-881b-4325-b66f-82a9ab126902"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = true,
                            IsInteresting = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("b2ed2f69-e6c7-482d-b146-ec7d14cde0fb"),
                            UserId = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985")
                        },
                        new
                        {
                            Id = new Guid("a66cc684-5818-4b79-ab6c-09ec08abd452"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = false,
                            IsInteresting = true,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("a2862e81-a1ff-4084-90dd-ce8827ce27e2"),
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36")
                        },
                        new
                        {
                            Id = new Guid("32ac2847-3356-4521-8209-8ff909fc79b9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFunny = false,
                            IsHelpful = true,
                            IsInteresting = false,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewId = new Guid("2fe24bcb-afa2-42df-bf28-5ea04172e783"),
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36")
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e7640e4-8701-46e5-85b9-596e03db2944"),
                            ConcurrencyStamp = "50df0f5c-4c09-48db-bea3-32fd6fd92e22",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        },
                        new
                        {
                            Id = new Guid("e98fc490-4589-4beb-a316-add18c8f3ddf"),
                            ConcurrencyStamp = "cea90193-7a43-4c6a-8c03-133b75e1f08a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            ConcurrencyStamp = "e0327518-8a8e-417f-9055-420eab1bc71b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = new Guid("8c6d9a31-3e47-45b5-b940-9225fa539f15"),
                            ConcurrencyStamp = "740040c8-91cd-430c-8502-5b2d354b6d6f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.TrackedMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("UserId", "MediaId")
                        .IsUnique();

                    b.ToTable("TrackedMedias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a62a6a8e-0211-4eff-a4a6-a0dc6a7a64c8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            Status = "Watched",
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602")
                        },
                        new
                        {
                            Id = new Guid("1a9ab45f-3b57-48b6-8829-7c9e14271aca"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("732e75d1-baa5-43bd-8636-8f91262545b2"),
                            Status = "ToWatch",
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602")
                        },
                        new
                        {
                            Id = new Guid("e9fceb36-89a3-46c2-9888-0198471c2029"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            Status = "Watched",
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602")
                        },
                        new
                        {
                            Id = new Guid("f0de9466-968a-4e9f-b3c3-3fe09eaeb383"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("732e75d1-baa5-43bd-8636-8f91262545b2"),
                            Status = "ToWatch",
                            UserId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8")
                        },
                        new
                        {
                            Id = new Guid("e35e01fa-d822-4d44-a528-d230c1df43e9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            Status = "Watched",
                            UserId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8")
                        },
                        new
                        {
                            Id = new Guid("87b92312-864b-4bd2-a52d-a5e641c8d8f7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            Status = "Watching",
                            UserId = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985")
                        },
                        new
                        {
                            Id = new Guid("9c7128df-7b0e-49fa-b25f-c53d218b3d3e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            Status = "OnPause",
                            UserId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976")
                        },
                        new
                        {
                            Id = new Guid("36389164-992e-4a82-9283-4b3af2389cd6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MediaId = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            Status = "Dropped",
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36")
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a59a38b0-124f-4756-96d6-5513fe83f617",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1998, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "mikasa.ackerman@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mikasa",
                            LastName = "Ackerman",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKASA.ACKERMAN@GMAIL.COM",
                            NormalizedUserName = "MIKASAACKERMAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbyCLf0/2GiiFd4R5D9mAIjPW2Coeg095H59UongM3Osns/UWXnDJ2Rub5PFO9+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7952cc67-e910-4eae-84f2-8ded134d2022",
                            TwoFactorEnabled = false,
                            UserName = "MikasaAckerman"
                        },
                        new
                        {
                            Id = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "154b2b9a-61ee-4172-aa90-a16525719536",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1995, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "eren.yeager@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Eren",
                            LastName = "Yeager",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "EREN.YEAGER@GMAIL.COM",
                            NormalizedUserName = "ERENYEAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbyCLf0/2GiiFd4R5D9mAIjPW2Coeg095H59UongM3Osns/UWXnDJ2Rub5PFO9+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8656057-9c03-414f-85c4-a99cc8cb2364",
                            TwoFactorEnabled = false,
                            UserName = "ErenYeager"
                        },
                        new
                        {
                            Id = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43079ae6-c8b3-4829-81ee-c60d50e3d22d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1997, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "levi.ivel@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Levi",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "LEVI.IVEL@GMAIL.COM",
                            NormalizedUserName = "LEVILEVI",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbyCLf0/2GiiFd4R5D9mAIjPW2Coeg095H59UongM3Osns/UWXnDJ2Rub5PFO9+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "172bc89f-5e36-49eb-8406-7a014e19ab49",
                            TwoFactorEnabled = false,
                            UserName = "LeviLevi"
                        },
                        new
                        {
                            Id = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "703173a0-2ced-4b63-b4b0-76844eb8afe5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2004, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "armin.arlert@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Armin",
                            LastName = "Arlert",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "ARMIN.ARLERT@GMAIL.COM",
                            NormalizedUserName = "ARMINARLERT",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbyCLf0/2GiiFd4R5D9mAIjPW2Coeg095H59UongM3Osns/UWXnDJ2Rub5PFO9+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e7e1db0-a60e-4e62-a752-54152d844d6e",
                            TwoFactorEnabled = false,
                            UserName = "ArminArlert"
                        },
                        new
                        {
                            Id = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2de06afb-2fa6-4c54-9438-8380ed36d894",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 1, 23, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "erwin.smith@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Erwin",
                            LastName = "Smith",
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "ERWIN.SMITH@GMAIL.COM",
                            NormalizedUserName = "ERWINSMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbyCLf0/2GiiFd4R5D9mAIjPW2Coeg095H59UongM3Osns/UWXnDJ2Rub5PFO9+JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1696980c-95df-4e53-bbd8-410cb31af7f8",
                            TwoFactorEnabled = false,
                            UserName = "ErwinSmith"
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            RoleId = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("71a7ed13-227f-4a94-aa9a-c0813c60f602"),
                            RoleId = new Guid("e98fc490-4589-4beb-a316-add18c8f3ddf"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("3ca625e3-0648-4d1b-a456-c1c6ee0e0da8"),
                            RoleId = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("fc4ce336-fac9-49dc-88f6-f60ff4231985"),
                            RoleId = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            RoleId = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("9b0795d2-46f0-493f-b37a-f80cc4700976"),
                            RoleId = new Guid("8e7640e4-8701-46e5-85b9-596e03db2944"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36"),
                            RoleId = new Guid("92215649-862e-4c2f-a4c6-1c61cb245ad5"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("a6a707c8-9d67-4b36-8036-86e085670b36"),
                            RoleId = new Guid("8c6d9a31-3e47-45b5-b940-9225fa539f15"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Movie", b =>
                {
                    b.HasBaseType("KixPlay_Backend.Data.Entities.Media");

                    b.Property<string>("MetreageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WonAwards")
                        .HasColumnType("int");

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c36c9b3-d576-4213-8318-49e1882daa38"),
                            AiringStatus = "Aired",
                            BannerUrl = "https://i2-prod.mirror.co.uk/incoming/article20584611.ece/ALTERNATES/s1200b/1_Fractured_00_10_38_22_R.jpg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Driving cross-country, Ray and his wife and daughter stop at a highway rest area where his daughter falls and breaks her arm. After a frantic rush to the hospital and a clash with the check-in nurse, Ray is finally able to get her to a doctor. While the wife and daughter go downstairs for an MRI, Ray, exhausted, passes out in a chair in the lobby. Upon waking up, they have no record or knowledge of Ray's family ever being checked in.—Alan B. McElroy",
                            Duration = new TimeSpan(0, 1, 40, 0, 0),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PreviewImageUrls = "[\r\n  \"https://occ-0-2794-2219.1.nflxso.net/dnm/api/v6/E8vDc_W8CLv7-yMQu8KMEC7Rrr8/AAAABSrkPHFHFt3JHfZOtaq2Naho-W8R0qxyTgNmDuM5etrbqvn_8hBS34qp5co6gh9EeW9I61LmTGx_yGG3ytieoDgjuHdF.jpg?r=054\",\r\n  \"https://www.refinery29.com/images/8556165.jpg?crop=2000%2C1051%2Cx0%2Cy133\",\r\n  \"https://d2e111jq13me73.cloudfront.net/sites/default/files/styles/share_link_image_large/public/screenshots/csm-movie/fractured-screenshot-1.jpg?itok=eLiXNoOY\"\r\n]",
                            PreviewVideoUrls = "[\r\n  \"https://www.youtube.com/watch?v=S8obCz5NSog\"\r\n]",
                            ReleaseDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A couple stops at a gas station, where their 6 y.o. daughter's arm is fractured. They hurry to a hospital. Something strange is going on there. The wife and daughter go missing.",
                            ThumbnailUrl = "https://m.media-amazon.com/images/M/MV5BZTE0MWE4NzMtMzc4Ny00NWE4LTg2OTQtZmIyNDdhZjdiZmJhXkEyXkFqcGdeQXVyMzY0MTE3NzU@._V1_.jpg",
                            Title = "Fractured",
                            MetreageType = "Long",
                            WonAwards = 15
                        },
                        new
                        {
                            Id = new Guid("732e75d1-baa5-43bd-8636-8f91262545b2"),
                            AiringStatus = "Unreleased",
                            BannerUrl = "https://i.ytimg.com/vi/oMSdFM12hOw/maxresdefault.jpg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "From acclaimed director Robert Eggers, The Northman is an epic revenge thriller that explores how far a Viking prince will go to seek justice for his murdered father.",
                            Duration = new TimeSpan(0, 2, 20, 0, 0),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PreviewImageUrls = "[\r\n  \"https://decider.com/wp-content/uploads/2021/12/The-Northman.jpg?quality=80\\u0026strip=all\",\r\n  \"https://static1.colliderimages.com/wordpress/wp-content/uploads/2021/12/Alexander-Skarsgard-and-Anya-Taylor-Joy-The-Northman-social.jpg\",\r\n  \"https://m.media-amazon.com/images/M/MV5BYjA3NjkyZjYtN2UwZC00MWM5LTk4MDUtMzcxNDU4ZDE3OWZkXkEyXkFqcGdeQWpnYW1i._V1_QL75_UX500_CR0,0,500,281_.jpg\"\r\n]",
                            PreviewVideoUrls = "[\r\n  \"https://www.youtube.com/watch?v=oMSdFM12hOw\"\r\n]",
                            ReleaseDate = new DateTime(2022, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "Written by Eggers and Icelandic poet and novelist Sjón Sigurdsson, Northman is described as a grounded story set in Iceland at the turn of the 10th century that centres on a Nordic prince who seeks revenge for the death of his father.",
                            ThumbnailUrl = "https://pics.filmaffinity.com/The_Northman-208868927-large.jpg",
                            Title = "The Northman",
                            MetreageType = "Long",
                            WonAwards = 0
                        },
                        new
                        {
                            Id = new Guid("e33f7813-258e-4c6c-bf4a-06bfdcdd1095"),
                            AiringStatus = "Aired",
                            BannerUrl = "https://s3.amazonaws.com/static.rogerebert.com/uploads/review/primary_image/reviews/the-invitation-2016/The-Invitation-2016.jpg",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A man accepts an invitation to a dinner party hosted by his ex-wife, an unsettling affair that reopens old wounds and creates new tensions. A man accepts an invitation to a dinner party hosted by his ex-wife, an unsettling affair that reopens old wounds and creates new tensions.",
                            Duration = new TimeSpan(0, 1, 40, 0, 0),
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PreviewImageUrls = "[\r\n  \"https://static01.nyt.com/images/2016/04/08/arts/08INVITE/08INVITE-superJumbo.jpg\",\r\n  \"https://m.media-amazon.com/images/M/MV5BMTgzMTU1NjE4N15BMl5BanBnXkFtZTgwOTU3ODM1ODE@._V1_.jpg\",\r\n  \"http://www.moriareviews.com/rongulator/wp-content/uploads/Invitation-2015-8.jpg\"\r\n]",
                            PreviewVideoUrls = "[\r\n  \"https://www.youtube.com/watch?v=0-mp77SZ_0M\"\r\n]",
                            ReleaseDate = new DateTime(2015, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Synopsis = "A man accepts an invitation to a dinner party hosted by his ex-wife, an unsettling affair that reopens old wounds and creates new tensions.",
                            ThumbnailUrl = "https://m.media-amazon.com/images/M/MV5BMTkzODMwNDkzOF5BMl5BanBnXkFtZTgwNDA4NzA1ODE@._V1_.jpg",
                            Title = "The Invitation",
                            MetreageType = "Long",
                            WonAwards = 10
                        });
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Comment", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.User", "OriginalPoster")
                        .WithMany("Comments")
                        .HasForeignKey("OriginalPosterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.Comment", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("KixPlay_Backend.Data.Entities.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OriginalPoster");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Media", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Next")
                        .WithOne()
                        .HasForeignKey("KixPlay_Backend.Data.Entities.Media", "NextId");

                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Previous")
                        .WithOne()
                        .HasForeignKey("KixPlay_Backend.Data.Entities.Media", "PreviousId");

                    b.Navigation("Next");

                    b.Navigation("Previous");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.MediaInGenre", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Genre", "Genre")
                        .WithMany("HasMedias")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Media")
                        .WithMany("InGenres")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.MediaSource", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Media")
                        .WithMany("MediaSources")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.Provider", "Provider")
                        .WithMany("MediaSources")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.RelatedMedia", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "MediaFrom")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("MediaFromId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "MediaTo")
                        .WithMany("RelatedTo")
                        .HasForeignKey("MediaToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MediaFrom");

                    b.Navigation("MediaTo");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Review", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Media")
                        .WithMany("Reviews")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.User", "OriginalPoster")
                        .WithMany("Reviews")
                        .HasForeignKey("OriginalPosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("OriginalPoster");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.ReviewOpinion", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Review", "Review")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.User", "User")
                        .WithMany("ReviewOpinions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.TrackedMedia", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", "Media")
                        .WithMany("TrackedMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.User", "User")
                        .WithMany("TrackedMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.UserRole", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KixPlay_Backend.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Movie", b =>
                {
                    b.HasOne("KixPlay_Backend.Data.Entities.Media", null)
                        .WithOne()
                        .HasForeignKey("KixPlay_Backend.Data.Entities.Movie", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Genre", b =>
                {
                    b.Navigation("HasMedias");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Media", b =>
                {
                    b.Navigation("InGenres");

                    b.Navigation("MediaSources");

                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");

                    b.Navigation("Reviews");

                    b.Navigation("TrackedMedias");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Provider", b =>
                {
                    b.Navigation("MediaSources");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Review", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ReviewOpinions");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("KixPlay_Backend.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ReviewOpinions");

                    b.Navigation("Reviews");

                    b.Navigation("TrackedMedias");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
